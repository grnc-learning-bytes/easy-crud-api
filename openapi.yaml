components:
  schemas:
    GetManyLinks:
      properties:
        next:
          title: Next
          type: string
        self:
          title: Self
          type: string
      required:
      - self
      - next
      title: GetManyLinks
      type: object
    GetManyMeta:
      properties:
        page:
          title: Page
          type: integer
        page_size:
          title: Page Size
          type: integer
        total:
          title: Total
          type: integer
      required:
      - total
      - page
      - page_size
      title: GetManyMeta
      type: object
    GetSingleLinks:
      properties:
        self:
          title: Self
          type: string
      required:
      - self
      title: GetSingleLinks
      type: object
    GetSingleMeta:
      properties: {}
      title: GetSingleMeta
      type: object
    GetTaskResponse:
      properties:
        data:
          $ref: '#/components/schemas/TaskData-Output'
        links:
          $ref: '#/components/schemas/GetSingleLinks'
        meta:
          $ref: '#/components/schemas/GetSingleMeta'
          default: {}
      required:
      - data
      - links
      title: GetTaskResponse
      type: object
    GetTasksResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/TaskData-Output'
          title: Data
          type: array
        links:
          $ref: '#/components/schemas/GetManyLinks'
        meta:
          $ref: '#/components/schemas/GetManyMeta'
      required:
      - data
      - meta
      - links
      title: GetTasksResponse
      type: object
    GetUserResponse:
      properties:
        data:
          $ref: '#/components/schemas/UserData'
        links:
          $ref: '#/components/schemas/GetSingleLinks'
        meta:
          $ref: '#/components/schemas/GetSingleMeta'
          default: {}
      required:
      - data
      - links
      title: GetUserResponse
      type: object
    GetUsersResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserData'
          title: Data
          type: array
        links:
          $ref: '#/components/schemas/GetManyLinks'
        meta:
          $ref: '#/components/schemas/GetManyMeta'
      required:
      - data
      - meta
      - links
      title: GetUsersResponse
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    PatchMeta:
      properties:
        updated:
          title: Updated
          type: boolean
      required:
      - updated
      title: PatchMeta
      type: object
    PatchTaskResponse:
      properties:
        data:
          $ref: '#/components/schemas/TaskData-Output'
        meta:
          $ref: '#/components/schemas/PatchMeta'
      required:
      - data
      - meta
      title: PatchTaskResponse
      type: object
    PatchUserResponse:
      properties:
        data:
          $ref: '#/components/schemas/UserData'
        meta:
          $ref: '#/components/schemas/PatchMeta'
      required:
      - data
      - meta
      title: PatchUserResponse
      type: object
    PostLinks:
      properties:
        self:
          title: Self
          type: string
      required:
      - self
      title: PostLinks
      type: object
    PostMeta:
      properties:
        created:
          title: Created
          type: boolean
      required:
      - created
      title: PostMeta
      type: object
    PostTaskResponse:
      properties:
        data:
          $ref: '#/components/schemas/TaskData-Output'
        links:
          $ref: '#/components/schemas/PostLinks'
        meta:
          $ref: '#/components/schemas/PostMeta'
      required:
      - data
      - meta
      - links
      title: PostTaskResponse
      type: object
    PostUserResponse:
      properties:
        data:
          $ref: '#/components/schemas/UserData'
        links:
          $ref: '#/components/schemas/PostLinks'
        meta:
          $ref: '#/components/schemas/PostMeta'
      required:
      - data
      - meta
      - links
      title: PostUserResponse
      type: object
    Task:
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        description:
          title: Description
          type: string
        name:
          title: Name
          type: string
        priority:
          $ref: '#/components/schemas/TaskPriority'
        status:
          $ref: '#/components/schemas/TaskStatus'
        tags:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Tags
        updated_at:
          format: date-time
          title: Updated At
          type: string
      required:
      - name
      - description
      - priority
      - status
      - created_at
      - updated_at
      title: Task
      type: object
    TaskData-Input:
      properties:
        attributes:
          $ref: '#/components/schemas/Task'
        id:
          title: Id
          type: integer
        relationships:
          $ref: '#/components/schemas/TaskRelationships-Input'
        type:
          default: task
          title: Type
          type: string
      required:
      - id
      - attributes
      - relationships
      title: TaskData
      type: object
    TaskData-Output:
      properties:
        attributes:
          $ref: '#/components/schemas/Task'
        id:
          title: Id
          type: integer
        relationships:
          $ref: '#/components/schemas/TaskRelationships-Output'
        type:
          default: task
          title: Type
          type: string
      required:
      - id
      - attributes
      - relationships
      title: TaskData
      type: object
    TaskPriority:
      enum:
      - critical
      - high
      - medium
      - low
      - minor
      title: TaskPriority
      type: string
    TaskRelationshipData:
      properties:
        data:
          $ref: '#/components/schemas/TaskRelationshipUser'
      required:
      - data
      title: TaskRelationshipData
      type: object
    TaskRelationshipUser:
      properties:
        id:
          title: Id
          type: integer
        type:
          default: user
          title: Type
          type: string
      required:
      - id
      title: TaskRelationshipUser
      type: object
    TaskRelationships-Input:
      properties:
        user:
          $ref: '#/components/schemas/TaskRelationshipData'
      required:
      - user
      title: TaskRelationships
      type: object
    TaskRelationships-Output:
      properties:
        user:
          $ref: '#/components/schemas/TaskRelationshipData'
      required:
      - user
      title: TaskRelationships
      type: object
    TaskStatus:
      enum:
      - backlog
      - in_progress
      - done
      title: TaskStatus
      type: string
    User:
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        email:
          title: Email
          type: string
        updated_at:
          format: date-time
          title: Updated At
          type: string
        username:
          title: Username
          type: string
      required:
      - username
      - email
      - created_at
      - updated_at
      title: User
      type: object
    UserData:
      properties:
        attributes:
          $ref: '#/components/schemas/User'
        id:
          title: Id
          type: integer
        type:
          default: user
          title: Type
          type: string
      required:
      - id
      - attributes
      title: UserData
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  title: FastAPI
  version: 0.1.0
openapi: 3.1.0
paths:
  /:
    get:
      operationId: root__get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Root
  /health:
    get:
      operationId: health_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                const: healthy
                title: Response Health Health Get
                type: string
          description: Successful Response
      summary: Health
  /tasks:
    get:
      operationId: get_tasks_tasks_get
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              title: Tags
              type: array
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTasksResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Tasks
      tags:
      - tasks
    post:
      operationId: create_task_tasks_post
      parameters:
      - in: query
        name: name
        required: true
        schema:
          title: Name
          type: string
      - in: query
        name: description
        required: true
        schema:
          title: Description
          type: string
      - in: query
        name: priority
        required: true
        schema:
          title: Priority
          type: string
      - in: query
        name: status
        required: true
        schema:
          title: Status
          type: string
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - items:
                  type: string
                type: array
              - type: 'null'
              title: Tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTaskResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      operationId: delete_task_tasks__id__delete
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Task
      tags:
      - tasks
    get:
      operationId: get_task_tasks__id__get
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Task
      tags:
      - tasks
    patch:
      operationId: update_task_tasks__id__patch
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      - in: query
        name: name
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      - in: query
        name: description
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
      - in: query
        name: status
        required: false
        schema:
          anyOf:
          - $ref: '#/components/schemas/TaskStatus'
          - type: 'null'
          title: Status
      - in: query
        name: priority
        required: false
        schema:
          anyOf:
          - $ref: '#/components/schemas/TaskPriority'
          - type: 'null'
          title: Priority
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - items:
                  type: string
                type: array
              - type: 'null'
              title: Tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchTaskResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update Task
      tags:
      - tasks
  /users:
    get:
      operationId: get_users_users_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
          description: Successful Response
      summary: Get Users
      tags:
      - users
    post:
      operationId: create_user_users_post
      parameters:
      - in: query
        name: username
        required: true
        schema:
          title: Username
          type: string
      - in: query
        name: password
        required: true
        schema:
          title: Password
          type: string
      - in: query
        name: email
        required: true
        schema:
          title: Email
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUserResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create User
      tags:
      - users
  /users/me:
    get:
      operationId: get_user_me_users_me_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
          description: Successful Response
      summary: Get User Me
      tags:
      - users
  /users/{id}:
    delete:
      operationId: delete_user_users__id__delete
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete User
      tags:
      - users
    get:
      operationId: get_user_users__id__get
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get User
      tags:
      - users
    patch:
      operationId: patch_user_users__id__patch
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      - in: query
        name: username
        required: true
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Username
      - in: query
        name: email
        required: true
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Email
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchUserResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch User
      tags:
      - users
